[{"H:\\CopyTodo\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"1","H:\\CopyTodo\\src\\app\\App.tsx":"2","H:\\CopyTodo\\src\\app\\app-reducer.ts":"3","H:\\CopyTodo\\src\\index.tsx":"4","H:\\CopyTodo\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5","H:\\CopyTodo\\src\\utils\\error-utils.ts":"6","H:\\CopyTodo\\src\\components\\EditableSpan\\EditableSpan.tsx":"7","H:\\CopyTodo\\src\\features\\Login\\auth-reducer.ts":"8","H:\\CopyTodo\\src\\api\\todolists-api.ts":"9","H:\\CopyTodo\\src\\features\\Login\\Login.tsx":"10","H:\\CopyTodo\\src\\features\\TodolistsList\\tasks-reducer.ts":"11","H:\\CopyTodo\\src\\components\\AddItemForm\\AddItemForm.tsx":"12","H:\\CopyTodo\\src\\features\\TodolistsList\\TodolistsList.tsx":"13","H:\\CopyTodo\\src\\features\\TodolistsList\\todolists-reducer.ts":"14","H:\\CopyTodo\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"15","H:\\CopyTodo\\src\\reportWebVitals.ts":"16","H:\\CopyTodo\\src\\app\\store.ts":"17"},{"size":4193,"mtime":1596711650000,"results":"18","hashOfConfig":"19"},{"size":2756,"mtime":1628623096838,"results":"20","hashOfConfig":"19"},{"size":2401,"mtime":1628618739244,"results":"21","hashOfConfig":"19"},{"size":827,"mtime":1627648352080,"results":"22","hashOfConfig":"19"},{"size":1773,"mtime":1596291938000,"results":"23","hashOfConfig":"19"},{"size":792,"mtime":1628508396339,"results":"24","hashOfConfig":"19"},{"size":1462,"mtime":1628620575867,"results":"25","hashOfConfig":"19"},{"size":1993,"mtime":1628623506122,"results":"26","hashOfConfig":"19"},{"size":2973,"mtime":1628617806992,"results":"27","hashOfConfig":"19"},{"size":3713,"mtime":1628611440944,"results":"28","hashOfConfig":"19"},{"size":5633,"mtime":1596718526000,"results":"29","hashOfConfig":"19"},{"size":1588,"mtime":1628619595948,"results":"30","hashOfConfig":"19"},{"size":4032,"mtime":1626961847184,"results":"31","hashOfConfig":"19"},{"size":6056,"mtime":1628623539256,"results":"32","hashOfConfig":"19"},{"size":1092,"mtime":1628505400914,"results":"33","hashOfConfig":"19"},{"size":425,"mtime":1607862188000,"results":"34","hashOfConfig":"19"},{"size":1049,"mtime":1628618628100,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"fb7ki6",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\CopyTodo\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["76","77","78","79","80","81"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","H:\\CopyTodo\\src\\app\\App.tsx",[],"H:\\CopyTodo\\src\\app\\app-reducer.ts",["82"],"H:\\CopyTodo\\src\\index.tsx",["83"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            {/*<BrowserRouter>*/}\n            <HashRouter>\n                <App/>\n            </HashRouter>\n            {/*</BrowserRouter>*/}\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["84","85"],"H:\\CopyTodo\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["86","87","88"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","H:\\CopyTodo\\src\\utils\\error-utils.ts",[],"H:\\CopyTodo\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"H:\\CopyTodo\\src\\features\\Login\\auth-reducer.ts",["89"],"H:\\CopyTodo\\src\\api\\todolists-api.ts",[],"H:\\CopyTodo\\src\\features\\Login\\Login.tsx",["90"],"H:\\CopyTodo\\src\\features\\TodolistsList\\tasks-reducer.ts",["91","92"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","H:\\CopyTodo\\src\\components\\AddItemForm\\AddItemForm.tsx",["93","94","95"],"H:\\CopyTodo\\src\\features\\TodolistsList\\TodolistsList.tsx",["96","97","98","99","100","101","102","103"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/Login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","H:\\CopyTodo\\src\\features\\TodolistsList\\todolists-reducer.ts",["104","105"],"H:\\CopyTodo\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"H:\\CopyTodo\\src\\reportWebVitals.ts",[],"H:\\CopyTodo\\src\\app\\store.ts",[],{"ruleId":"106","severity":1,"message":"107","line":35,"column":8,"nodeType":"108","endLine":35,"endColumn":10,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":39,"column":8,"nodeType":"108","endLine":39,"endColumn":42,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"110","line":46,"column":8,"nodeType":"108","endLine":46,"endColumn":54,"suggestions":"112"},{"ruleId":"106","severity":1,"message":"110","line":48,"column":95,"nodeType":"108","endLine":48,"endColumn":134,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"110","line":49,"column":101,"nodeType":"108","endLine":49,"endColumn":140,"suggestions":"114"},{"ruleId":"106","severity":1,"message":"110","line":50,"column":107,"nodeType":"108","endLine":50,"endColumn":146,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":9,"nodeType":"118","messageId":"119","endLine":1,"endColumn":17},{"ruleId":"116","severity":1,"message":"120","line":8,"column":9,"nodeType":"118","messageId":"119","endLine":8,"endColumn":22},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"106","severity":1,"message":"110","line":15,"column":97,"nodeType":"108","endLine":15,"endColumn":130,"suggestions":"125"},{"ruleId":"106","severity":1,"message":"110","line":20,"column":8,"nodeType":"108","endLine":20,"endColumn":41,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"110","line":24,"column":8,"nodeType":"108","endLine":24,"endColumn":41,"suggestions":"127"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":10,"nodeType":"118","messageId":"119","endLine":1,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":62,"column":28,"nodeType":"130","endLine":62,"endColumn":45},{"ruleId":"116","severity":1,"message":"131","line":5,"column":9,"nodeType":"118","messageId":"119","endLine":5,"endColumn":22},{"ruleId":"132","severity":1,"message":"133","line":13,"column":94,"nodeType":"134","messageId":"135","endLine":13,"endColumn":96},{"ruleId":"116","severity":1,"message":"136","line":2,"column":9,"nodeType":"118","messageId":"119","endLine":2,"endColumn":12},{"ruleId":"116","severity":1,"message":"137","line":2,"column":14,"nodeType":"118","messageId":"119","endLine":2,"endColumn":20},{"ruleId":"116","severity":1,"message":"138","line":2,"column":22,"nodeType":"118","messageId":"119","endLine":2,"endColumn":33},{"ruleId":"106","severity":1,"message":"139","line":37,"column":8,"nodeType":"108","endLine":37,"endColumn":10,"suggestions":"140"},{"ruleId":"106","severity":1,"message":"141","line":42,"column":8,"nodeType":"108","endLine":42,"endColumn":10,"suggestions":"142"},{"ruleId":"106","severity":1,"message":"141","line":47,"column":8,"nodeType":"108","endLine":47,"endColumn":10,"suggestions":"143"},{"ruleId":"106","severity":1,"message":"141","line":52,"column":8,"nodeType":"108","endLine":52,"endColumn":10,"suggestions":"144"},{"ruleId":"106","severity":1,"message":"141","line":57,"column":8,"nodeType":"108","endLine":57,"endColumn":10,"suggestions":"145"},{"ruleId":"106","severity":1,"message":"141","line":62,"column":8,"nodeType":"108","endLine":62,"endColumn":10,"suggestions":"146"},{"ruleId":"106","severity":1,"message":"141","line":67,"column":8,"nodeType":"108","endLine":67,"endColumn":10,"suggestions":"147"},{"ruleId":"106","severity":1,"message":"141","line":72,"column":8,"nodeType":"108","endLine":72,"endColumn":10,"suggestions":"148"},{"ruleId":"132","severity":1,"message":"133","line":14,"column":45,"nodeType":"134","messageId":"135","endLine":14,"endColumn":47},{"ruleId":"116","severity":1,"message":"149","line":143,"column":6,"nodeType":"118","messageId":"119","endLine":143,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["150"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["151"],["152"],["153"],["154"],["155"],"@typescript-eslint/no-unused-vars","'Dispatch' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","no-native-reassign",["156"],"no-negated-in-lhs",["157"],["158"],["159"],["160"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setAppErrorAC' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["161"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["162"],["163"],["164"],["165"],["166"],["167"],["168"],"'ThunkDispatch' is defined but never used.",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"171","fix":"173"},{"desc":"171","fix":"174"},{"desc":"171","fix":"175"},{"desc":"171","fix":"176"},"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"177"},{"desc":"171","fix":"178"},{"desc":"171","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"182","fix":"184"},{"desc":"182","fix":"185"},{"desc":"182","fix":"186"},{"desc":"182","fix":"187"},{"desc":"182","fix":"188"},{"desc":"182","fix":"189"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"190","text":"191"},"Update the dependencies array to be: [props]",{"range":"192","text":"193"},{"range":"194","text":"193"},{"range":"195","text":"193"},{"range":"196","text":"193"},{"range":"197","text":"193"},{"range":"198","text":"193"},{"range":"199","text":"193"},{"range":"200","text":"193"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"201","text":"202"},"Update the dependencies array to be: [dispatch]",{"range":"203","text":"204"},{"range":"205","text":"204"},{"range":"206","text":"204"},{"range":"207","text":"204"},{"range":"208","text":"204"},{"range":"209","text":"204"},{"range":"210","text":"204"},[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294],[1328,1330],"[demo, dispatch, isLoggedIn]",[1499,1501],"[dispatch]",[1670,1672],[1875,1877],[2088,2090],[2289,2291],[2436,2438],[2615,2617]]