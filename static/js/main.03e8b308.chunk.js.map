{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","changeTodolistEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","activateEditMode","useCallback","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","console","log","useDispatch","useEffect","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","loginTC","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleChange","App","isLoggetIn","finally","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03e8b308.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '82d01912-7bcf-409a-9e81-ee3e3d5abae8'\r\n\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title});\r\n\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title});\r\n\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', data)\r\n\r\n    },\r\n    me() {\r\n        return  instance.get<ResponseType<AuthMeType>>('/auth/me')\r\n\r\n    },\r\n    logout() {\r\n        return  instance.delete<ResponseType>('/auth/login')\r\n\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldsError: string[]\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {authAPI, LoginType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport { AppThunkType } from '../../app/store';\r\n\r\n\r\n\r\n\r\n// types\r\nexport type LoginActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: LoginActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (values: LoginType): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(values)\r\n        .then((res) => {\r\n        if(res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = (): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {AppThunkType} from \"./store\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = null | string;\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppIsInitializedActionType\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false\r\n\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET/IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'APP/SET/IS-INITIALIZED', isInitialized} as const)\r\n\r\n\r\nexport const initializeAppTC = (): AppThunkType => (dispatch) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true));\r\n        })\r\n}\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AppThunkType} from \"../../app/store\";\r\n\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n              handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, \"failed\"))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            }))\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(id, \"failed\"))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTodolistEntityStatusAC(id, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTodolistEntityStatusAC(id, 'failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(id, 'failed'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodolistsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType, AppThunkType} from '../../app/store'\r\nimport { setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {\r\n    AddTodolistActionType,\r\n    changeTodolistEntityStatusAC,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunkType => (dispatch) => {\r\n   dispatch(setAppStatusAC('loading'))\r\ndispatch(   changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): AppThunkType =>\r\n    (dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                title: task.title,\r\n                status: task.status,\r\n                ...domainModel\r\n            };\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                        dispatch(action)\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch);\r\n                        dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch);\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n                })\r\n        }\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n//type ThunkDispatch = Dispatch<TasksActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error && 'Title is required'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n\r\n    const {\r\n        value,\r\n        onChange,\r\n        disabled = false\r\n    } = props;\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(value);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = useCallback(() => {\r\n        setEditMode(true);\r\n        onChange(value);\r\n    },[onChange, value])\r\n\r\n    const activateViewMode = useCallback(() => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    },[onChange, title])\r\n\r\n    const onPressEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode()\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title}\r\n                        onKeyPress={onPressEnterOffEditMode}\r\n                        disabled={disabled}\r\n                        onChange={onChangeTitle}\r\n                        autoFocus\r\n                        onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId, props.changeTaskStatus]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId, props.changeTaskTitle]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo( ({demo = false, ...props}: PropsType) => {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [props.todolist.id, dispatch, demo])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        if(demo) return;\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        if(demo) return;\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        if(demo) return;\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        if(demo) return;\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        if(demo) return;\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch, demo])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        if(demo) return;\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        if(demo) return;\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n       if (demo) return;\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch, demo])\r\n\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/Login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Password must be 4 characters or more'\r\n            }\r\n\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type='email'\r\n\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{'color': 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{'color': 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                             onChange={formik.handleChange}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggetIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {dispatch(logoutTC())}, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TODOLIST\r\n                    </Typography>\r\n\r\n                    {isLoggetIn && <Button color=\"inherit\"  onClick={logoutHandler}>Logout</Button> }\r\n\r\n\r\n\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'}\r\n                           render={() => <h1 style={{'textAlign': 'center', 'fontSize': '50px'}}>404 PAGE NOT\r\n                               FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {ActionsType, appReducer} from './app-reducer'\r\nimport {authReducer, LoginActionsType} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType =\r\n    | ActionsType\r\n    | TodolistsActionsType\r\n    | TasksActionsType\r\n    | LoginActionsType;\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AppActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            {/*<BrowserRouter>*/}\n            <HashRouter>\n                <App/>\n            </HashRouter>\n            {/*</BrowserRouter>*/}\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}